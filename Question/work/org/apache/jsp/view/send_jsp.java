/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2022-03-22 05:27:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import bean.*;

public final class send_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("bean");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- 管理者用詳細画面・返信画面 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");

	User userObj = (User) session.getAttribute("userObj");
	if (userObj == null) {
		request.getRequestDispatcher("/view/login.jsp").forward(request, response);
	}

      out.write("\r\n");
      out.write("\r\n");

	Question question = (Question) request.getAttribute("question");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>管理者メニュー</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<header>\r\n");
      out.write("\t<h1 style=\"text-align: center; color: blue\">管理者画面</h1>\r\n");
      out.write("\t<hr style=\"height: 4px; background-color: blue\">\r\n");
      out.write("</header>\r\n");
      out.write("\r\n");
      out.write("<table>\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td><a href=\"");
      out.print(request.getContextPath());
      out.write("/view/main.jsp\">[メニュー]</a></td>\r\n");
      out.write("\t\t<td></td>\r\n");
      out.write("\t\t<td><a href=\"");
      out.print(request.getContextPath());
      out.write("/list\">[一覧]</a></td>\r\n");
      out.write("\t\t<td></td>\r\n");
      out.write("\t\t<td>\r\n");
      out.write("\t\t\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/logout\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"cmd\" value=\"logout\"> <input\r\n");
      out.write("\t\t\t\t\ttype=\"submit\" value=\"ログアウト\">\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2 align=\"center\">お問い合わせ返信</h2>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<h4 align=\"center\">お客様情報詳細</h4>\r\n");
      out.write("\r\n");
      out.write("\t<table align=\"center\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">No</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">名前</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">年齢</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">性別</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">住所</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">メールアドレス</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">お問い合わせ内容</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">その他</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">お問い合わせ日時</td>\r\n");
      out.write("\t\t\t<td bgcolor=\"blue\">送信/未送信</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getNum());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getName());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getAge());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getSex());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getAdress());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getMail());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getSelected());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getText());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getDate());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(question.getTf());
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<br>\r\n");
      out.write("\r\n");
      out.write("\t<form action=\"");
      out.print(request.getContextPath());
      out.write("/mail\" method=\"get\">\r\n");
      out.write("\t\t<table align=\"center\">\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"num\" value=\"");
      out.print(question.getNum());
      out.write("\">\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"mail\" value=\"");
      out.print(question.getMail());
      out.write("\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>件名：</td>\r\n");
      out.write("\t\t\t\t<td><input id=\"textA\" type=\"text\" name=\"textA\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>本文：</td>\r\n");
      out.write("\t\t\t\t<td colspan=\"5\"><textarea id=\"textB\" name=\"textB\" cols=\"80\"\r\n");
      out.write("\t\t\t\t\t\trows=\"10\" name=\"replay\" placeholder=\"※返信内容を記入\"></textarea></td>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\t\t<table align=\"center\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td><input button onclick=\"clickEvent()\" type=\"submit\"\r\n");
      out.write("\t\t\t\t\tvalue=\"送信\"></td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tfunction clickEvent() {\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar textA = document.getElementById(\"textA\").value;\r\n");
      out.write("\t\t\tvar textB = document.getElementById(\"textB\").value;\r\n");
      out.write("\r\n");
      out.write("\t\t\tvar str = \"\";\r\n");
      out.write("\t\t\tif (textA.length <= 0) {\r\n");
      out.write("\t\t\t\talert('件名が空白です。');\r\n");
      out.write("\t\t\t\tstr = prompt(\"件名を入力してください。\");\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"textA\").value = str;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\tif (textB.length <= 0) {\r\n");
      out.write("\t\t\t\talert('メール本文が空白です。');\r\n");
      out.write("\t\t\t\tstr = prompt(\"送信内容を入力してください。\");\r\n");
      out.write("\t\t\t\tdocument.getElementById(\"textB\").value = str;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t};\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
